Генерация словаря:
Скомпилировать main.cpp из проекта Dictionaries. В качестве первого аргумента передаётся nAtoms - количество атомов, в качестве второго szSignal - длина сигнала, четвёртый аргумент - dictType отвечает за выбор словаря - g - Gabor, d - DCT.
Программа печатает массив и записывает его в файл "dictType + nAtoms + szSignal + .txt"

Использование алгоритмов:
Скомпилировать main.cpp из проекта Algorithms. В качестве первого аргумента передаётся nAtoms - количество атомов, в качестве второго szSignal - длина сигнала, в третьем szTest - длина сигнала с уменьшенной сеткой, четвёртый аргумент - dictType, как в проекте Dictionaries, пятый аргумент - algoType отвечает за используемый алгоритм (o - OMP).
Убедитесь, что необходимые файлы ("dictType + nAtoms + szSignal + .txt" и "dictType + nAtoms + szTest + .txt") находятся в каталоге.
Вывод программы. В первых строках выводится residule (в каждой строчке szSignal значений, последнее число в строке - общее для всего этапа) на каждом шаге алгоритма. Если алгоритм остановился раньше, появится надпись No Good Atoms. В следующей строке указывается количество коэффициентов и оставшаяся неточность.
После надписи vCoefficients идут по порядку выбора коэффициенты, рядом написан номер атома в старом словаре, которому соответствует этот коэффициент.
Далее идёт вывод сигналов - aSignal - полученный нами, rSignal - эталонный. Diff - максимальное отклонение

Как подавать на вход функции я пока не придумал, так что для изменения функции надо руками менять код в main строки 29 и 33, определение vSignal и rSignal соответственно